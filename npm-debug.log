0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'prompt' ]
2 info using npm@1.4.9
3 info using node@v0.10.28
4 verbose cache add [ 'prompt', null ]
5 verbose cache add name=undefined spec="prompt" args=["prompt",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'prompt',
6 verbose parsed url   path: 'prompt',
6 verbose parsed url   href: 'prompt' }
7 silly lockFile 9c7e05e5-prompt prompt
8 verbose lock prompt /Users/fm2/.npm/9c7e05e5-prompt.lock
9 silly lockFile 9c7e05e5-prompt prompt
10 silly lockFile 9c7e05e5-prompt prompt
11 verbose addNamed [ 'prompt', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 038de136-prompt prompt@
14 verbose lock prompt@ /Users/fm2/.npm/038de136-prompt.lock
15 silly addNameRange { name: 'prompt', range: '*', hasData: false }
16 verbose url raw prompt
17 verbose url resolving [ 'https://registry.npmjs.org/', './prompt' ]
18 verbose url resolved https://registry.npmjs.org/prompt
19 info trying registry request attempt 1 at 12:35:36
20 verbose etag "ELZD2TKL3U446TF9Z17E15DST"
21 http GET https://registry.npmjs.org/prompt
22 http 304 https://registry.npmjs.org/prompt
23 silly registry.get cb [ 304,
23 silly registry.get   { date: 'Sun, 11 May 2014 16:34:56 GMT',
23 silly registry.get     server: 'Apache',
23 silly registry.get     via: '1.1 varnish',
23 silly registry.get     'last-modified': 'Sun, 11 May 2014 16:34:56 GMT',
23 silly registry.get     'cache-control': 'max-age=1',
23 silly registry.get     etag: '"ELZD2TKL3U446TF9Z17E15DST"',
23 silly registry.get     'x-served-by': 'cache-jfk1029-JFK',
23 silly registry.get     'x-cache': 'MISS',
23 silly registry.get     'x-cache-hits': '0',
23 silly registry.get     'x-timer': 'S1399826096.463435411,VS0,VE90',
23 silly registry.get     vary: 'Accept',
23 silly registry.get     'content-length': '0',
23 silly registry.get     'keep-alive': 'timeout=10, max=50',
23 silly registry.get     connection: 'Keep-Alive' } ]
24 verbose etag prompt from cache
25 silly addNameRange number 2 { name: 'prompt', range: '*', hasData: true }
26 silly addNameRange versions [ 'prompt',
26 silly addNameRange   [ '0.0.1',
26 silly addNameRange     '0.0.2',
26 silly addNameRange     '0.0.3',
26 silly addNameRange     '0.0.4',
26 silly addNameRange     '0.1.0',
26 silly addNameRange     '0.1.1',
26 silly addNameRange     '0.1.2',
26 silly addNameRange     '0.1.3',
26 silly addNameRange     '0.1.4',
26 silly addNameRange     '0.1.5',
26 silly addNameRange     '0.1.7',
26 silly addNameRange     '0.1.8',
26 silly addNameRange     '0.1.9',
26 silly addNameRange     '0.1.10',
26 silly addNameRange     '0.1.11',
26 silly addNameRange     '0.1.12',
26 silly addNameRange     '0.2.0',
26 silly addNameRange     '0.2.1',
26 silly addNameRange     '0.2.2',
26 silly addNameRange     '0.2.3',
26 silly addNameRange     '0.2.4',
26 silly addNameRange     '0.2.5',
26 silly addNameRange     '0.2.6',
26 silly addNameRange     '0.2.7',
26 silly addNameRange     '0.2.8',
26 silly addNameRange     '0.2.9',
26 silly addNameRange     '0.2.10',
26 silly addNameRange     '0.2.11',
26 silly addNameRange     '0.2.12' ] ]
27 verbose addNamed [ 'prompt', '0.2.12' ]
28 verbose addNamed [ '0.2.12', '0.2.12' ]
29 silly lockFile 08399e24-prompt-0-2-12 prompt@0.2.12
30 verbose lock prompt@0.2.12 /Users/fm2/.npm/08399e24-prompt-0-2-12.lock
31 silly lockFile 08399e24-prompt-0-2-12 prompt@0.2.12
32 silly lockFile 08399e24-prompt-0-2-12 prompt@0.2.12
33 silly lockFile 038de136-prompt prompt@
34 silly lockFile 038de136-prompt prompt@
35 silly resolved [ { name: 'prompt',
35 silly resolved     description: 'A beautiful command-line prompt for node.js',
35 silly resolved     version: '0.2.12',
35 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
35 silly resolved     maintainers: [ [Object], [Object] ],
35 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/prompt.git' },
35 silly resolved     dependencies:
35 silly resolved      { pkginfo: '0.x.x',
35 silly resolved        read: '1.0.x',
35 silly resolved        revalidator: '0.1.x',
35 silly resolved        utile: '0.2.x',
35 silly resolved        winston: '0.6.x' },
35 silly resolved     devDependencies: { vows: '0.7.0' },
35 silly resolved     main: './lib/prompt',
35 silly resolved     scripts:
35 silly resolved      { test: 'vows test/prompt-test.js --spec',
35 silly resolved        'test-all': 'vows --spec' },
35 silly resolved     engines: { node: '>= 0.6.6' },
35 silly resolved     readme: '# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require(\'prompt\');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get([\'username\', \'email\'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  email: \' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js\n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here\'s a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: \'Name must be only letters, spaces, or dashes\',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  name: \' + result.name);\n    console.log(\'  password: \' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is:\n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password:\n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password\n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere\'s an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: \'Enter your password\',     // Prompt displayed to the user. If not supplied name will be used.\n    type: \'string\',                 // Specify the type of input to expect.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: \'Password must be letters\', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: \'lamepassword\',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n    before: function(value) { return \'v\' + value; } // Runs before node-prompt callbacks. It modifies user\'s input\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\nUsing `type: \'array\'` has some special cases.\n\n- `description` will not work in the schema if `type: \'array\'` is defined.\n- `maxItems` takes precedence over `minItems`.\n- Arrays that do not have `maxItems` defined will require users to `SIGINT` (`^C`) before the array is ended.\n- If `SIGINT` (`^C`) is triggered before `minItems` is met, a validation error will appear. This will require users to `SIGEOF` (`^D`) to end the input.\n\nFor more information on things such as `maxItems` and `minItems`, refer to the [revalidator](https://github.com/flatiron/revalidator) repository.\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra \'name\' property:\n\n```js\n  var prompt = require(\'../lib/prompt\');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: \'username\',\n      required: true\n    }, {\n      name: \'password\',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  password: \' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options.\nif a value is set as a property of `prompt.override` prompt will use that instead of\nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require(\'prompt\'),\n      optimist = require(\'optimist\')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get([\'username\', \'email\'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  email: \' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object\nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this:\n\n``` js\n  var obj = {\n    password: \'lamepassword\',\n    mindset: \'NY\'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log(\'Initial object to be extended:\');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, [\'username\', \'email\'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log(\'Updated object received:\');\n    console.dir(obj);\n  });\n```\n\n### Prompt history\nYou can use the `prompt.history()` method to get access to previous prompt input.\n\n``` js\n  prompt.get([{\n    name: \'name\',\n    description: \'Your name\',\n    type: \'string\',\n    require: true\n  }, {\n    name: \'surname\',\n    description: \'Your surname\',\n    type: \'string\',\n    require: true,\n    message: \'Please dont use the demo credentials\',\n    conform: function(surname) {\n      var name = prompt.history(\'name\').value;\n      return (name !== \'John\' || surname !== \'Smith\');\n    }\n  }], function(err, results) {\n    console.log(results);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is "prompt," the default `prompt.delimiter` is\n": ", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require("prompt");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = "Question!".rainbow;\n  prompt.delimiter = "><".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: "What is your name?".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log("You said your name is: ".cyan + result.name.cyan);\n  });\n```\n\nIf you don\'t want colors, you can set\n\n```js\nvar prompt = require(\'prompt\');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash\n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n',
35 silly resolved     readmeFilename: 'README.md',
35 silly resolved     bugs: { url: 'https://github.com/flatiron/prompt/issues' },
35 silly resolved     homepage: 'https://github.com/flatiron/prompt',
35 silly resolved     _id: 'prompt@0.2.12',
35 silly resolved     _shasum: '3ed2d13f1921c69126c0447ae14c83fd481e6119',
35 silly resolved     _from: 'prompt@',
35 silly resolved     _resolved: 'https://registry.npmjs.org/prompt/-/prompt-0.2.12.tgz' } ]
36 info install prompt@0.2.12 into /Users/fm2
37 info installOne prompt@0.2.12
38 info /Users/fm2/node_modules/prompt unbuild
39 info preuninstall prompt@0.2.12
40 info uninstall prompt@0.2.12
41 verbose true,/Users/fm2/node_modules,/Users/fm2/node_modules unbuild prompt@0.2.12
42 info postuninstall prompt@0.2.12
43 info /Users/fm2/node_modules/prompt unbuild
44 error error rolling back Error: EACCES, unlink '/Users/fm2/node_modules/prompt/node_modules/utile/node_modules/.bin/mkdirp'
44 error error rolling back  prompt@0.2.12 { [Error: EACCES, unlink '/Users/fm2/node_modules/prompt/node_modules/utile/node_modules/.bin/mkdirp']
44 error error rolling back   errno: 3,
44 error error rolling back   code: 'EACCES',
44 error error rolling back   path: '/Users/fm2/node_modules/prompt/node_modules/utile/node_modules/.bin/mkdirp' }
45 error Error: EACCES, unlink '/Users/fm2/node_modules/prompt/node_modules/utile/node_modules/.bin/mkdirp'
45 error  { [Error: EACCES, unlink '/Users/fm2/node_modules/prompt/node_modules/utile/node_modules/.bin/mkdirp']
45 error   errno: 3,
45 error   code: 'EACCES',
45 error   path: '/Users/fm2/node_modules/prompt/node_modules/utile/node_modules/.bin/mkdirp' }
46 error Please try running this command again as root/Administrator.
47 error System Darwin 13.1.0
48 error command "node" "/usr/local/bin/npm" "install" "prompt"
49 error cwd /Users/fm2/phase_0_unit_1
50 error node -v v0.10.28
51 error npm -v 1.4.9
52 error path /Users/fm2/node_modules/prompt/node_modules/utile/node_modules/.bin/mkdirp
53 error code EACCES
54 error errno 3
55 error stack Error: EACCES, unlink '/Users/fm2/node_modules/prompt/node_modules/utile/node_modules/.bin/mkdirp'
56 verbose exit [ 3, true ]
